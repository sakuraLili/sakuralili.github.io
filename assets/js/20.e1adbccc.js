(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{376:function(_,v,e){_.exports=e.p+"assets/img/03.9c9c971a.png"},377:function(_,v,e){_.exports=e.p+"assets/img/04.a77d5b89.png"},378:function(_,v,e){_.exports=e.p+"assets/img/01.49f855bc.png"},379:function(_,v,e){_.exports=e.p+"assets/img/02.c20e6bb4.png"},529:function(_,v,e){"use strict";e.r(v);var r=e(5),o=Object(r.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h2",{attrs:{id:"一、容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、容器"}},[_._v("#")]),_._v(" 一、容器")]),_._v(" "),v("h3",{attrs:{id:"_1-1-什么是容器"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-什么是容器"}},[_._v("#")]),_._v(" 1.1 什么是容器")]),_._v(" "),v("p",[v("code",[_._v("IBM DeveloperWorks")]),_._v("网站这样描述容器：")]),_._v(" "),v("blockquote",[v("p",[_._v("容器有效地将由单个操作系统管理的资源划分到孤立的组中，以更好地在孤立的组之间平衡有冲突的资源使用需求。与虚拟化相比，这样既不需要指令级模拟，也不需要即时编译。容器可以在核心"),v("code",[_._v("CPU")]),_._v("本地运行指令，而不需要任何专门的解释机制。此外，也避免了准虚拟化("),v("code",[_._v("Paravirtualization")]),_._v(")和系统调用替换中的复杂性。")])]),_._v(" "),v("p",[_._v("简单来说，"),v("strong",[_._v("容器可以将软件打包成标准化的单元，以用于开发、交付和部署。")])]),_._v(" "),v("p",[_._v("容器是轻量的，包含了软件运行所需的所有内容：代码、运行时的环境、系统工具、系统库和设置。而且容器赋予了软件独立性，避免了环境差异(比如开发和生产环境)的影响，从而有助于减少团队在相同基础设施上运行不同软件的冲突。")]),_._v(" "),v("h2",{attrs:{id:"二、docker的基础概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、docker的基础概念"}},[_._v("#")]),_._v(" 二、"),v("code",[_._v("Docker")]),_._v("的基础概念")]),_._v(" "),v("h3",{attrs:{id:"_2-1-什么是docker"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-什么是docker"}},[_._v("#")]),_._v(" 2.1 什么是"),v("code",[_._v("Docker")]),_._v("？")]),_._v(" "),v("p",[_._v("我们从下面的四点理解什么是"),v("code",[_._v("Docker")]),_._v(":")]),_._v(" "),v("ol",[v("li",[v("code",[_._v("Docker")]),_._v("是世界领先的软件容器平台。")]),_._v(" "),v("li",[v("code",[_._v("Docker")]),_._v("使用"),v("code",[_._v("Google")]),_._v("公司推出的"),v("code",[_._v("Go")]),_._v("语言  进行开发实现，基于"),v("code",[_._v("Linux")]),_._v("内核的"),v("code",[_._v("cgroup")]),_._v("，"),v("code",[_._v("namespace")]),_._v("，以及"),v("code",[_._v("AUFS")]),_._v("类的"),v("code",[_._v("UnionFS")]),_._v("等技术，对进程进行封装隔离，属于操作系统层面的虚拟化技术。 由于隔离的进程独立于宿主和其它的隔离的进\n程，因此也称其为容器。")]),_._v(" "),v("li",[v("code",[_._v("Docker")]),_._v("能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。")]),_._v(" "),v("li",[_._v("用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。")])]),_._v(" "),v("h3",{attrs:{id:"_2-2-docker-架构"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-docker-架构"}},[_._v("#")]),_._v(" 2.2 Docker 架构")]),_._v(" "),v("p",[_._v("先来看下Docker架构：")]),_._v(" "),v("p",[v("img",{attrs:{src:e(376),alt:"image from dependency"}})]),_._v(" "),v("ol",[v("li",[v("p",[v("code",[_._v("Docker Host")]),_._v("是进行"),v("code",[_._v("Docker")]),_._v("操作的宿主机，在里面运行了一个"),v("code",[_._v("Docker daemon")]),_._v("的核心守护进程，负责构建、运行和分发"),v("code",[_._v("Docker")]),_._v("容器。")])]),_._v(" "),v("li",[v("p",[_._v("在宿主机中安装了"),v("code",[_._v("Docker")]),_._v("客户端，它与"),v("code",[_._v("Docker daemon")]),_._v("守护进程进行通信，客户端会将"),v("code",[_._v("build")]),_._v("、"),v("code",[_._v("pull")]),_._v("、"),v("code",[_._v("run")]),_._v("等命令发送到"),v("code",[_._v("Docker daemon")]),_._v("守护进程执行。")])]),_._v(" "),v("li",[v("p",[_._v("右边"),v("code",[_._v("Registry")]),_._v("是镜像仓库，其中存储着"),v("code",[_._v("Docker")]),_._v("镜像，是一个所有"),v("code",[_._v("Docker")]),_._v("用户共享"),v("code",[_._v("Docker")]),_._v("镜像的服务，"),v("code",[_._v("Docker daemon")]),_._v("守护进程与之进行交互。")])])]),_._v(" "),v("h3",{attrs:{id:"_2-3-docker的思想"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-docker的思想"}},[_._v("#")]),_._v(" 2.3 "),v("code",[_._v("Docker")]),_._v("的思想")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("集装箱")])]),_._v(" "),v("li",[v("strong",[_._v("标准化")]),_._v("： 1. 运输方式 2. 存储方式 3. "),v("code",[_._v("API")]),_._v("接口")]),_._v(" "),v("li",[v("strong",[_._v("隔离")])])]),_._v(" "),v("h3",{attrs:{id:"_2-4-docker容器的特点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-docker容器的特点"}},[_._v("#")]),_._v(" 2.4 "),v("code",[_._v("Docker")]),_._v("容器的特点")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("标准化")])])]),_._v(" "),v("p",[v("code",[_._v("Docker")]),_._v("使用行业标准来创建容器，所以容器能适用于所有地方。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("轻量")])])]),_._v(" "),v("p",[_._v("容器共享计算机的操作系统系统内核，因此不需要每个应用程序都使用操作系统，从而提高了服务器效率，并降低了服务器和许可成本。")]),_._v(" "),v("ul",[v("li",[v("strong",[_._v("安全")])])]),_._v(" "),v("p",[_._v("Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。")]),_._v(" "),v("h3",{attrs:{id:"_2-5-docker优势"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-docker优势"}},[_._v("#")]),_._v(" 2.5 "),v("code",[_._v("Docker")]),_._v("优势")]),_._v(" "),v("ol",[v("li",[v("p",[v("strong",[_._v("更快速的交付和部署")]),_._v("：使用"),v("code",[_._v("Docker")]),_._v("，开发人员可以使用镜像来快速构建一套标准的开发环境。开发完成之后，测试和运维人员可以直接使用完全相同的环境来部署代码。"),v("code",[_._v("Docker")]),_._v("可以快速创建和删除容器，实现快速迭代，节约开发、测试、部署的大量时间。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("更高效的资源利用")]),_._v("：运行"),v("code",[_._v("Docker")]),_._v("容器不需要额外的虚拟化管理程序("),v("code",[_._v("VMM")]),_._v("以及"),v("code",[_._v("Hypervisor")]),_._v(")的支持，"),v("code",[_._v("Docker")]),_._v("是内核级的虚拟化，可以实现更高的性能，同时对资源的额外需求很低。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("更轻松的迁移和扩展")]),_._v("："),v("code",[_._v("Docker")]),_._v("容器几乎可以在任意的平台上运行，这种兼容性让用户可以在不同平台之间轻松地迁移应用。")])]),_._v(" "),v("li",[v("p",[v("strong",[_._v("更简单的更新管理")]),_._v("：使用"),v("code",[_._v("Dockerfile")]),_._v("，只需要小小的配置修改后，所以得修改都以增量的方式被分发和更新，从而实现自动化和高效的容器管理。")])])]),_._v(" "),v("h3",{attrs:{id:"_2-6-docker的核心概念"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-docker的核心概念"}},[_._v("#")]),_._v(" 2.6 "),v("code",[_._v("Docker")]),_._v("的核心概念")]),_._v(" "),v("p",[v("code",[_._v("Docker")]),_._v("包含三个核心概念")]),_._v(" "),v("ol",[v("li",[_._v("镜像("),v("code",[_._v("Image")]),_._v(")")]),_._v(" "),v("li",[_._v("容器("),v("code",[_._v("Container")]),_._v(")")]),_._v(" "),v("li",[_._v("仓库("),v("code",[_._v("Repository")]),_._v(")")])]),_._v(" "),v("p",[v("img",{attrs:{src:e(377),alt:"image from dependency"}})]),_._v(" "),v("h4",{attrs:{id:"镜像-image"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#镜像-image"}},[_._v("#")]),_._v(" 镜像("),v("code",[_._v("Image")]),_._v(")")]),_._v(" "),v("blockquote",[v("p",[_._v("一个特殊的文件系统")])]),_._v(" "),v("p",[_._v("操作系统分为内核和用户空间。对于"),v("code",[_._v("Linux")]),_._v("而言，内核启动后，会挂载"),v("code",[_._v("root")]),_._v("文件系统为其提供用户空间支持。而"),v("code",[_._v("Docker")]),_._v("镜像("),v("code",[_._v("Image")]),_._v(")就相当于是一个"),v("code",[_._v("root")]),_._v("文件系统。")]),_._v(" "),v("p",[v("code",[_._v("Docker")]),_._v("镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些运行时所需的一些配置参数(如匿名卷、环境变量和用户等)。镜像不包含任何动态数据，其内容在构建之后也不会被改变。")]),_._v(" "),v("p",[v("code",[_._v("Docker")]),_._v("充分利用"),v("code",[_._v("Union FS")]),_._v("技术，"),v("strong",[_._v("将容器设计为分层存储的架构")]),_._v("。")]),_._v(" "),v("p",[v("em",[v("strong",[_._v("镜像实际是由多层文件系统联合组成。镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完成后不会再发生改变，后一层上的任何改变只发生在自己这一层")])]),_._v("。比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记该文件已删除。在最终容器运行时，虽然不会看到这个文件，但实际上该文件会一直跟随镜像。因此，在构建镜像时，需要小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。")]),_._v(" "),v("p",[_._v("分层存储的架构还使得镜像的复用、定制变得更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。")]),_._v(" "),v("h4",{attrs:{id:"容器-container"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#容器-container"}},[_._v("#")]),_._v(" 容器("),v("code",[_._v("Container")]),_._v(")")]),_._v(" "),v("blockquote",[v("p",[_._v("镜像运行时的实体")])]),_._v(" "),v("p",[_._v("镜像和容器的关系，就像是面向对象程序设计中的 类 和 实例 一样，"),v("strong",[_._v("镜像是静态的定义，容器是镜像运行时的实体。")])]),_._v(" "),v("p",[_._v("容器的实质是进程，但与直接在宿主环境执行的进行不同，容器进程运行于属于自己的独立的命名空间。容器也是使用分层存储。")]),_._v(" "),v("p",[_._v("容器存储层的生命周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器的消亡而丢失。")]),_._v(" "),v("p",[_._v("所以，不应该将数据存储在容器中，容器存储层要保持无状态化。所有的文件写入操作，都应该使用数据卷("),v("code",[_._v("Volume")]),_._v(")、或者绑定宿主目录，在这些位置的读写会跳过容器存储层，直接对宿主（或网路存储）发生读写，其性能和稳定性更高。数据卷的生命周期独立于容器，容器消亡，数据卷不会消亡。因此，使用数据卷后，容器可以随意删除、重新运行，数据不会丢失。")]),_._v(" "),v("h4",{attrs:{id:"仓库-repository"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#仓库-repository"}},[_._v("#")]),_._v(" 仓库("),v("code",[_._v("Repository")]),_._v(")")]),_._v(" "),v("blockquote",[v("p",[_._v("集中存放镜像文件的地方")])]),_._v(" "),v("p",[_._v("一个"),v("code",[_._v("Docker Registry")]),_._v("中可以包含多个仓库（"),v("code",[_._v("Repository")]),_._v("）；每个仓库可以包含多个标签（"),v("code",[_._v("Tag")]),_._v("）；每个标签对应一个镜像。")]),_._v(" "),v("p",[_._v("最常使用的"),v("code",[_._v("Registry")]),_._v("公开服务是官方的"),v("a",{attrs:{href:"https://hub.docker.com/",target:"_blank",rel:"noopener noreferrer"}},[_._v(" Docker Hub "),v("OutboundLink")],1),_._v("，这也是默认的"),v("code",[_._v("Registry")]),_._v("，并拥有大量的高质量的官方镜像。在国内访问"),v("code",[_._v("Docker Hub")]),_._v("可能会比较慢，国内也有一些云服务商提供类似于"),v("code",[_._v("Docker Hub")]),_._v("的公开服务。比如"),v("a",{attrs:{href:"https://hub.tenxcloud.com/",target:"_blank",rel:"noopener noreferrer"}},[_._v(" 时速云镜像库"),v("OutboundLink")],1),_._v("、"),v("a",{attrs:{href:"https://www.163yun.com/product/repo",target:"_blank",rel:"noopener noreferrer"}},[_._v("网易云镜像服务"),v("OutboundLink")],1),_._v("、"),v("a",{attrs:{href:"https://www.daocloud.io/",target:"_blank",rel:"noopener noreferrer"}},[_._v("DaoCloud 镜像市场"),v("OutboundLink")],1),_._v("、"),v("a",{attrs:{href:"https://www.aliyun.com/product/containerservice?utm_content=se_1292836",target:"_blank",rel:"noopener noreferrer"}},[_._v("阿里云镜像库"),v("OutboundLink")],1),_._v("等。")]),_._v(" "),v("h3",{attrs:{id:"三、docker和-虚拟机"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、docker和-虚拟机"}},[_._v("#")]),_._v(" 三、"),v("code",[_._v("Docker")]),_._v("和 虚拟机")]),_._v(" "),v("h3",{attrs:{id:"_3-1-虚拟化"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-虚拟化"}},[_._v("#")]),_._v(" 3.1 虚拟化")]),_._v(" "),v("h4",{attrs:{id:"虚拟化定义"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#虚拟化定义"}},[_._v("#")]),_._v(" 虚拟化定义")]),_._v(" "),v("p",[_._v("维基百科上对虚拟化的定义如下：")]),_._v(" "),v("blockquote",[v("p",[_._v("在计算机技术中，虚拟化是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以用比原本的组态更好的方式来应用这些资源。")])]),_._v(" "),v("p",[_._v("简单来说，"),v("strong",[_._v("虚拟化的核心是对资源的抽象")]),_._v("，目标往往是为了在同一个主机上同时运行多个系统或应用，从而提高系统资源的利用率，并且带来降低成本、方便管理和容错容灾等好处。")]),_._v(" "),v("h4",{attrs:{id:"虚拟化分类"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#虚拟化分类"}},[_._v("#")]),_._v(" 虚拟化分类")]),_._v(" "),v("p",[v("img",{attrs:{src:e(378),alt:"image from dependency"}})]),_._v(" "),v("p",[v("code",[_._v("Docker")]),_._v("以及其他容器技术都属于操作系统虚拟化这个范畴，操作系统虚拟化最大的特点就是不需要额外的"),v("code",[_._v("supervisor")]),_._v("支持。")]),_._v(" "),v("h3",{attrs:{id:"_3-2-docker和其他虚拟机的不同点"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-docker和其他虚拟机的不同点"}},[_._v("#")]),_._v(" 3.2 "),v("code",[_._v("Docker")]),_._v("和其他虚拟机的不同点")]),_._v(" "),v("p",[v("img",{attrs:{src:e(379),alt:"image from dependency"}})]),_._v(" "),v("p",[_._v("传统方式是在硬件层面实现虚拟化，需要有额外的虚拟机管理应用和虚拟机操作系统层。"),v("code",[_._v("Docker")]),_._v("容器是在操作系统层面上实现虚拟化，直接复用本地主机的操作系统，因此更加轻量级。")]),_._v(" "),v("h3",{attrs:{id:"_3-3-docker与虚拟机比较"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-docker与虚拟机比较"}},[_._v("#")]),_._v(" 3.3 "),v("code",[_._v("Docker")]),_._v("与虚拟机比较")]),_._v(" "),v("table",[v("thead",[v("tr",[v("th",[_._v("特性")]),_._v(" "),v("th",[_._v("容器")]),_._v(" "),v("th",[_._v("虚拟机")])])]),_._v(" "),v("tbody",[v("tr",[v("td",[_._v("启动速度")]),_._v(" "),v("td",[_._v("秒级")]),_._v(" "),v("td",[_._v("分钟级")])]),_._v(" "),v("tr",[v("td",[_._v("性能")]),_._v(" "),v("td",[_._v("接近原生")]),_._v(" "),v("td",[_._v("较弱")])]),_._v(" "),v("tr",[v("td",[_._v("内存代价")]),_._v(" "),v("td",[_._v("很小")]),_._v(" "),v("td",[_._v("较多")])]),_._v(" "),v("tr",[v("td",[_._v("硬盘使用")]),_._v(" "),v("td",[_._v("一般为MB")]),_._v(" "),v("td",[_._v("一般为GB")])]),_._v(" "),v("tr",[v("td",[_._v("运行密度")]),_._v(" "),v("td",[_._v("单机支持上千个容器")]),_._v(" "),v("td",[_._v("一般十几个")])]),_._v(" "),v("tr",[v("td",[_._v("隔离性")]),_._v(" "),v("td",[_._v("安全隔离")]),_._v(" "),v("td",[_._v("安全隔离")])]),_._v(" "),v("tr",[v("td",[_._v("迁移性")]),_._v(" "),v("td",[_._v("优秀")]),_._v(" "),v("td",[_._v("一般")])])])]),_._v(" "),v("h2",{attrs:{id:"参考文献"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[_._v("#")]),_._v(" 参考文献")]),_._v(" "),v("p",[_._v("Docker技术入门与实战(第3版)")]),_._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.im/post/6844904035053486087",target:"_blank",rel:"noopener noreferrer"}},[_._v("Docker 搭建你的第一个 Node 项目到服务器(完整版)"),v("OutboundLink")],1)]),_._v(" "),v("p",[v("a",{attrs:{href:"https://juejin.im/post/6844903625584558093#heading-16",target:"_blank",rel:"noopener noreferrer"}},[_._v("可能是把Docker的概念讲的最清楚的一篇文章"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=o.exports}}]);